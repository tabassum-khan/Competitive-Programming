
/********************	PROBLEM STATEMENT	*******************/

Yukti found a strange paper with a Boolean expression written on it. Unfortunately, all the operands were missing from this expression. Being an innovative person, Yukti immediately created a riddle for her students based on this incomplete expression.

The students are given a string L describing a valid Boolean expression, where each operand (value) is replaced by the character '#'. A valid expression is defined as one of the following:

A single term '#'.
A string in the format "([expression1][operator][expression2])", where [expression1] and [expression2] are valid expressions and [operator] is one of the characters '&', '|' and '^' (denoting bitwise AND, OR and XOR respectively).
Each of the characters '#' in the string L should be replaced by one of the characters '0', '1', 'a' and 'A', uniformly randomly and independently. Then, the resulting expression is evaluated as follows:

A Boolean value a (0 or 1) is chosen. Each occurrence of the character 'a' is interpreted as this value and each occurrence of 'A' is interpreted as its negation (1−a). The characters '0' and '1' are interpreted as the Boolean values 0 and 1 respectively.
Since there are two possible values of a, we obtain two constant Boolean expressions this way. Let's denote them by G0 (when a = 0) and G1 (when a = 1).
Let's evaluate G0 and G1.
If G0=G1=0, the value of the expression is '0'.
If G0=G1=1, the value of the expression is '1'.
If G0=0 and G1=1, the value of the expression is 'a'.
If G0=1 and G1=0, the value of the expression is 'A'.
Can you find the probabilities with which the expression obtained after substituting for each character '#' evaluates to these values? It can be proved that for each of these values, the probability can be expressed as a fraction PQ, where P and Q are integers (P≥0, Q>0) and Q is coprime with 998,244,353. You should compute P⋅Q−1 modulo 998,244,353 for each of these values.

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first and only line of each test case contains a single string L.
Output
For each test case, print a single line containing four space-separated integers ― the answers corresponding to the probabilities that the value of the Boolean expression is '0', '1', 'a' or 'A' respectively.

Constraints
1≤T≤600
1≤|L|≤100,000
L contains only characters '#', '(', ')', '&', '|' and '^'
the sum of |L| over all test cases does not exceed 106

Subtasks
Subtask #1 (30 points): |L|≤300
Subtask #2 (70 points): original constraints

Example Input
2
#
(#&#)

Example Output
748683265 748683265 748683265 748683265
436731905 935854081 811073537 811073537

Explanation
Example case 1: The probabilities that the value of the expression is '0', '1', 'a' or 'A' are all equal to 1/4.

Example case 2: There can be total 16 different expressions. Out of which :

For : (1&1) ---> G0=G1=1, Probability for 1 = 1/16

(a&1) , (1&a) , (a&a) ---> G0=0 and G1=1, Probability for 'a' = 3/16

(A&1) , (1&A) , (A&A) ----> G0=1 and G1=0, Probability for 'A' = 3/16
Rest all expressions have G0=G1=0, Probability for '0' = 9/16

Probability are expressed as mentioned in Problem Statement.


/*****************		SOLUTION 		************************/

import java.io.*;
import java.util.*;

class cs {
	static int mod = 998244353;
	static class obj{
		 long n_0 = -1;
	   	 long n_1 = -1;
	   	 long n_a = -1;
	   	 long n_A = -1;
	   	 long Q;
	   	 public obj(long aa, long bb, long cc, long dd,long qq) {
	   	    	 this.n_0 = aa;
	   		     this.n_1 = bb;
	   		 this.n_a = cc;
	   		 this.n_A = dd;
	   		 Q = qq;
	   	 }
	}
	
	public static obj find(obj o1, obj o2,char ch) {
		 long temp_0 = 0;
	   	 long temp_1 = 0;
	   	 long temp_a = 0;
	   	 long temp_A = 0;
	   	 long Q = ((long)o1.Q*(long)o2.Q)%mod;
		if(ch == '&') {
		 	    temp_0 += o1.n_0*o2.n_0;
		 	temp_0 += o1.n_0*o2.n_1;
		    	temp_0 += o1.n_0*o2.n_a;
		    	temp_0 += o1.n_0*o2.n_A;
			    temp_0 += o1.n_1*o2.n_0;
			temp_1 += o1.n_1*o2.n_1;
			temp_a += o1.n_1*o2.n_a;
			temp_A += o1.n_1*o2.n_A;
			temp_0 += o1.n_a*o2.n_0;
			temp_a += o1.n_a*o2.n_1;
			temp_a += o1.n_a*o2.n_a;
			temp_0 += o1.n_a*o2.n_A;
			temp_0 += o1.n_A*o2.n_0;
			temp_A += o1.n_A*o2.n_1;
			temp_0 += o1.n_A*o2.n_a;
			temp_A += o1.n_A*o2.n_A;
		}else if(ch == '|') {
			temp_0 += o1.n_0*o2.n_0;
			temp_1 += o1.n_0*o2.n_1;
			temp_a += o1.n_0*o2.n_a;
			temp_A += o1.n_0*o2.n_A;
			temp_1 += o1.n_1*o2.n_0;
			temp_1 += o1.n_1*o2.n_1;
			temp_1 += o1.n_1*o2.n_a;
			temp_1 += o1.n_1*o2.n_A;
			temp_a += o1.n_a*o2.n_0;
		    	temp_1 += o1.n_a*o2.n_1;
		   	temp_a += o1.n_a*o2.n_a;
		          	temp_1 += o1.n_a*o2.n_A;
			temp_A += o1.n_A*o2.n_0;
			temp_1 += o1.n_A*o2.n_1;
			temp_1 += o1.n_A*o2.n_a;
			temp_A += o1.n_A*o2.n_A;
		}else {
			temp_0 += o1.n_0*o2.n_0;
			temp_1 += o1.n_0*o2.n_1;
			temp_a += o1.n_0*o2.n_a;
			temp_A += o1.n_0*o2.n_A;
			temp_1 += o1.n_1*o2.n_0;
			temp_0 += o1.n_1*o2.n_1;
			temp_A += o1.n_1*o2.n_a;
			temp_a += o1.n_1*o2.n_A;
			temp_a += o1.n_a*o2.n_0;
			temp_A += o1.n_a*o2.n_1;
			temp_0 += o1.n_a*o2.n_a;
			temp_1 += o1.n_a*o2.n_A;
			temp_A += o1.n_A*o2.n_0;
			temp_a += o1.n_A*o2.n_1;
			temp_1 += o1.n_A*o2.n_a;
			temp_0 += o1.n_A*o2.n_A;
		}
		return new obj(temp_0%mod, temp_1%mod, temp_a%mod, temp_A%mod, Q);
	}
	
	public static void main (String[] args) throws java.lang.Exception
	{
		FastReader s=new FastReader(); 
		int t =  s.nextInt();
		StringBuilder ans = new StringBuilder();
		for (int j = 0 ; j < t ; j++){
		     String str = s.next();
		     if(str.length() == 1 || (str.length() == 3 && str.charAt(0) == '(')) {
		    	 ans.append("748683265 748683265 748683265 748683265");
		    	 ans.append("\n");
		     }else{
		    	 str = '(' + str + ')';
		    	 String temp = "";
		    	 Stack<obj> st = new Stack<>();
		    	 Stack<Character> operators = new Stack<>();
		    	 for(int i = 0 ; i < str.length() ; i++){
		    		 if(str.charAt(i) == '#') {
		    			 st.push(new obj(1,1,1,1,modInverse(4, mod)));
		    		 }else if(str.charAt(i) == ')') {
		    			 if(operators.size() == 0)break;
		    			 obj o1 = st.pop();
		    			 obj o2 = st.pop();
		    			 char oper = operators.pop();
		    			 o1 = find(o1,o2,oper);
		    			 st.push(o1);
		    		 }else if(str.charAt(i) == '(') {
		    			 continue;
		    		 }else {
		    			 operators.push(str.charAt(i));
		    		 }
		    	 }
		    	 obj object = st.pop();
		    	 long n_0 = (object.n_0*object.Q)%mod;
		    	 long n_1 = (object.n_1*object.Q)%mod;
		    	 long n_a = (object.n_a*object.Q)%mod;
		    	 long n_A = (object.n_A*object.Q)%mod;
		    	 ans.append(n_0+" "+n_1+" "+n_a+" "+n_A+"\n");
		     }
		}
		System.out.println(ans);
	}
	
	
	static int modInverse(int a, int m) 
    { 
        
        int m00 = m; 
        int y=0,x=1; 
  
        if(m == 1) 
            return 0;
            
            while (a > 1) 
            { 
                int p = a / m; 
                int tp = m; 
                m = a % m; 
                a = tp; 
                tp = y; 
                y = x - p * y; 
                x = tp; 
            } 
        if (x < 0) 
            x += m00; 
  
        return x; 
    }
	 static class FastReader 
	    { 
	        BufferedReader br; 
	        StringTokenizer st; 
	  
	        public FastReader() 
	        { 
	            br = new BufferedReader(new
	                     InputStreamReader(System.in)); 
	        } 
	  
	        String next() 
	        { 
	            while (st == null || !st.hasMoreElements()) 
	            { 
	                try
	                { 
	                    st = new StringTokenizer(br.readLine()); 
	                } 
	                catch (IOException  e) 
	                { 
	                    e.printStackTrace(); 
	                } 
	            } 
	            return st.nextToken(); 
	        } 
	  
	        int nextInt() 
	        { 
	            return Integer.parseInt(next()); 
	        } 
	  
	        long nextLong() 
	        { 
	            return Long.parseLong(next()); 
	        } 
	  
	        double nextDouble() 
	        { 
	            return Double.parseDouble(next()); 
	        } 
	  
	        String nextLine() 
	        { 
	            String str = ""; 
	            try
	            { 
	                str = br.readLine(); 
	            } 
	            catch (IOException e) 
	            { 
	                e.printStackTrace(); 
	            } 
	            return str+"s"; 
	        } 
	    } 
		
}