
/*********************	PROBLEM STATEMENT **********************************/

Let's call a sequence of integers good if the product of its elements can be represented as a difference of squares of two integers. More formally, a sequence S1,S2,…,SK is good if it is possible to find two integers p and q such that S1⋅S2⋅…⋅SK=p2−q2.

Chef has a sequence A1,A2,…,AN. He wants to find the number of contiguous subsequences of A which are good. Can you help him?

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
The second line contains N space-separated integers A1,A2,…,AN.
Output
For each test case, print a single line containing one integer ― the number of good contiguous subsequences of A.

Constraints
1≤T≤103
1≤N≤105
|Ai|≤109 for each valid i
the sum of N over all test cases does not exceed 106
Subtasks
Subtask #1 (20 points): N≤103
Subtask #2 (80 points): original constraints

Example Input
2
3
1 2 3
3
2 5 6
Example Output
2
2
Explanation
Example case 1: For the subsequences [1] and [3], their products can be represented as differences of two squared integers: 1=12−02 and 3=22−12 respectively.

Example case 2: The two good subsequences are [5] and [2,5,6]. Their products can be represented as differences of two squared integers: 5=32−22 and 2⋅5⋅6=60=82−22 respectively.


/***************************	SOLUTION 	****************************/


#include<bits/stdc++.h>

using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--)
    {
        long  n,count=0,c=0,p=0,pr=1;
        cin>>n;
        
        vector<long> a;
        
        for(long i=0;i<n;i++)
        {
            long  g;
            cin>>g;
            g=abs(g);
            g=g%4;
            
            a.push_back(g);
            
            if(g%4!=2)
            c++;
        }
        
        vector<long> tp;
        vector<long> zp;
        
        for(long i=0;i<a.size();i++)
        {
            if(a[i]==1 || a[i]==3)
            {
                long j=i,k=0;
                
                while(j<a.size() && (a[j]==1 || a[j]==3))
                {
                    k++;
                    j++;
                }
                
                c+=long((k*(k-1))/2);
                long  n1=0,n2=0;
                
                if(zp.size()>0)
                n1=zp[zp.size()-1];
                
                if(tp.size()>=2)
                n2=tp[tp.size()-2];
                
                long m=long(max(n1,n2));
                
                c+=k*m;
                i=j-1;
            }
            
            if(a[i]==0)
            {
                zp.push_back(i);
                if(tp.size()>=2 && zp.size()>0)
                {
                    c+=long(max(zp[zp.size()-1],tp[tp.size()-2]));
                }
                else if(tp.size()>=2)
                {
                    c+=long(max(tp[tp.size()-2],i));
                }
                else
                c+=i;
                zp[zp.size()-1]++;
            }
            
            if(a[i]==2)
            {
                tp.push_back(i+1);
                if(tp.size()>=2)
                {
                    long  fi=tp[tp.size()-2];
                    long  n1=0;
                    if(zp.size()>0)
                    {
                        n1=zp[zp.size()-1];
                    }
                    c+=long(max(n1,fi));
                }
                else if(zp.size()>0)
                c+=zp[zp.size()-1];
            }
                
            
        }
        cout<<c<<endl;
    }
    
	return 0;
}
