
/**************		PROBLEM STATEMENT	**************************/

Chef lives in a country called ChefLand. The country can be represented as a tree of N cities (numbered 1 through N) connected by N−1 roads. For each valid i, the cost of a house in city i is Ai.

You should answer Q queries. In each query, you are given cities u and v (possibly identical); Chef is planning to buy houses in these cities. Chef's happiness quotient is equal to the product of the costs of houses in all cities which lie on the simple path between u and v (both inclusive). Since Chef loves playing with factors, he is asking you to tell him the number of factors of his happiness quotient, modulo 1,000,000,007 (109+7).

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
Each of the next N−1 lines contains two space-separated integers x and y denoting that cities x and y are connected by a road.
The following line contains N space-separated integers A1,A2,…,AN.
The following line contains a single integer Q.
Each of the next Q lines contains two space-separated integers u and v describing a query.

Output
For each query, print a single line containing one integer ― the number of factors of the happiness quotient modulo 1,000,000,007 (109+7).

Constraints
1≤T≤3
1≤N,Q≤105
1≤Ai≤106 for each valid i
the sum of N over all test cases does not exceed 105

Subtasks
Subtask #1 (10 points): N,Q≤103
Subtask #2 (30 points): N≤103
Subtask #3 (60 points): original constraints

Example Input
1
5
1 2
1 3
2 4
2 5
2 6 4 3 5
2
1 4
2 2

Example Output
9
4


/**************		SOLUTION	**************************/


 
#include <bits/stdc++.h> 
#define ll int
#define vi vector< ll >
#define vii vector< int >
#define mset(A,v,n) memset((A),(v),(n)*sizeof((A)[0]) ) 
#define FORi(n) for(int i=0;i<(n);i++)
#define FORj(n) for(int j=0;j<(n);j++)
#define pb push_back
#define inp(n) scanf("%lld",&(n))
#define inp2(n,m) scanf("%lld%lld",&(n),&(m));
#define all(v) (v).begin(),(v).end()
#define mp(a,b) make_pair((a),(b))
#define pi pair< ll , ll >

#define mit map<int,int>::iterator
#define mod 1000000007
using namespace std;


 
const int MAXN = 100005;
const int MAXM = 100005;
const int MAXA = 1000005;
const int LN = 19;
 
int N, M, K, cur, A[MAXN], LVL[MAXN], DP[LN][MAXN];
int BL[MAXN << 1], ID[MAXN << 1], VAL[MAXN];
long long int ANS[MAXM];
int d[MAXN], l[MAXN], r[MAXN];
bool VIS[MAXN];
vi P(MAXA),inv(MAXA);
vi F[MAXN];
vector < int > adjList[MAXN];
int modpow(int x){
    if (x == 1)return 1;
    long long int res=1;
    long long int y = mod-2;
    long long int a = x;
    while(y){
        if(y&1)res = (res*a)%mod;
        a = (a*a)%mod;
        y/=2;
    }
    return (int)(res);
}
struct query{
    int id, l, r, lc;
    
} ;
bool comp(query a, query b){
        return (BL[a.l] == BL[b.l]) ? (a.r < b.r) : (BL[a.l] < BL[b.l]);
    }


query Q[MAXM];


 
// Set up Stuff
void dfs(int u, int par){
    l[u] = ++cur; 
    ID[cur] = u;
    for (int i = 1; i < LN; i++) DP[i][u] = DP[i - 1][DP[i - 1][u]];
    for (int i = 0; i < adjList[u].size(); i++){
        int v = adjList[u][i];
        if (v == par) continue;
        LVL[v] = LVL[u] + 1;
        DP[0][v] = u;
        dfs(v, u);
    }
    r[u] = ++cur; ID[cur] = u;
}
 
// Function returns lca of (u) and (v)
inline int lca(int u, int v){
    if (LVL[u] > LVL[v]) swap(u, v);
    for (int i = LN - 1; i >= 0; i--)
        if (LVL[v] - (1 << i) >= LVL[u]) v = DP[i][v];
    if (u == v) return u;
    for (int i = LN - 1; i >= 0; i--){
        if (DP[i][u] != DP[i][v]){
            u = DP[i][u];
            v = DP[i][v];
        }
    }
    return DP[0][u];
}
vi Val(MAXA,1);
vi Inout(MAXA,0);
 
int a,b;
inline void check(int x, long long& res){
    // If (x) occurs twice, then don't consider it's value 
    //cout<<x<<" "<<A[x]<<"he\n";
    
    for(int i=0;i<F[x].size()/2;i++){
        a=F[x][i*2];
        b=F[x][i*2+1];
        res *= inv[Val[a]];
        res%=mod;
        if(Inout[x]==0)
            Val[a]+=b;
        else
            Val[a]-=b;
        //cout<<a<<" "<<b<<endl;
        res *= Val[a];
        res%=mod;
        //cout<<it.first<<" "<<it.second<<" it "<<inv[Val[it.first]]<<endl;
    }
    
    Inout[x]^=1;
}



void sieve(){
    FORi(MAXA){P[i]=i;inv[i]=modpow(i);}
    for(int i = 4;i < MAXA;i+=2)
         P[i]=2;

     for(long long int i = 3;i < MAXA;i+=2)
         if(P[i]==i)
             for(long long int j = i*i;j < MAXA;j+=2*i)
                 {//cout<<j<<endl;
                 if(P[j]==j)
                     P[j]=i;
                 }
}

map<int,int> mem;
vi fac(int n){
    vi f;
    mem.clear();

   
    while( n!=P[n] ){
        mem[P[n]]++;
        n/=P[n];
    }
    if(n>1)
        mem[n]++;
    for(auto it : mem)
        {f.pb(it.first);f.pb(it.second);}
    return f;
    
    
}
void print(vi v,int n){
    FORi(n)cout<<v[i]<<" ";
    cout<<endl;
}
 
void compute(){
 
    // Perform standard Mo's Algorithm
    int curL = Q[0].l, curR = Q[0].l - 1;
    long long int res = 1;
 
    for (int i = 0; i < M; i++){
 
        while (curL < Q[i].l) check(ID[curL++], res);
        while (curL > Q[i].l) check(ID[--curL], res);
        while (curR < Q[i].r) check(ID[++curR], res);
        while (curR > Q[i].r) check(ID[curR--], res);
 
        int u = ID[curL], v = ID[curR];
 
        // Case 2
        if (Q[i].lc != u and Q[i].lc != v) check(Q[i].lc, res);
        ANS[Q[i].id] = res;
        if (Q[i].lc != u and Q[i].lc != v) check(Q[i].lc, res);
        //
        //cout<<u<<" "<<v<<endl;
        //cout<<curL<<" "<<curR<<endl;
        //print(Val,10);
        //cout<<u<<" here "<<v<<endl;
    }
 
    for (int i = 0; i < M; i++) printf("%lld\n", ANS[i]);
    //for(int i = 1;i<=2*N;i++)cout<<ID[i]<<" ";cout<<endl;
}
 

int main(){
 
    int u, v, x;
    int t;
    cin>>t;
    sieve();
    while (t--){
        cin>>N;

        
        // Cleanup
        cur = 0;
        memset(VIS, 0, sizeof(VIS));
        memset(VAL, 0, sizeof(VAL));
        FORi(MAXA)Val[i]=1,Inout[i]=0;
        for (int i = 1; i <= N; i++) adjList[i].clear();
        
        
        for (int i = 1; i < N; i++){
            scanf("%d %d", &u, &v);
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }
        for(int i=1;i<=N;i++){
            cin>>A[i];
            //cout<<A[i]<<" "<<i<<endl;
            F[i]=fac(A[i]);
        }
     
        // Preprocess
        DP[0][1] = 1;
        dfs(1, -1);
        int size = sqrt(cur);
        cin>>M;
 
        for (int i = 1; i <= cur; i++) BL[i] = (i - 1) / size + 1;
 
        for (int i = 0; i < M; i++){
            scanf("%d %d", &u, &v);
            Q[i].lc = lca(u, v);
            if (l[u] > l[v]) swap(u, v);
            if (Q[i].lc == u) Q[i].l = l[u], Q[i].r = l[v];
            else Q[i].l = r[u], Q[i].r = l[v];
            Q[i].id = i;
        }
 
        sort(Q, Q + M, comp);
        compute();
    }
}
